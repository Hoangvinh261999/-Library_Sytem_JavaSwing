/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mylibsys.libsystem.ui;


import com.mylibsys.libsystem.dao.nguoiDungDao;
import com.mylibsys.libsystem.entity.NguoiDung;
import static com.mylibsys.libsystem.utils.dateFormart.formatDate;

import static com.mylibsys.libsystem.utils.sqlSeverConnect.layKetNoi;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Properties;
import java.util.Random;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author kuteb
 */
public class quenMkUi extends javax.swing.JPanel {

//    UserDao usd = new UserDao();
    nguoiDungDao ndDao = new nguoiDungDao();
    Connection conn = null;
    PreparedStatement sttm = null;
    private int randomNumber;
    private Timer timer;
    private int remainingSeconds;
    private Thread numberThread;
    private boolean isRunning = false;

    /**
     * Creates new form thongTinND
     */
    public quenMkUi() {
        initComponents();
//        getTT();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnDoiMK = new javax.swing.JButton();
        btnGuiMa = new javax.swing.JButton();
        showPasswordCheckBox = new javax.swing.JCheckBox();
        txtMKmoi = new javax.swing.JPasswordField();
        txtNhapLaiMK = new javax.swing.JPasswordField();
        txtMaXN = new javax.swing.JTextField();
        txtThoiGian = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(850, 550));
        setMinimumSize(new java.awt.Dimension(850, 550));
        setPreferredSize(new java.awt.Dimension(850, 550));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel1.setText("Nhập email");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel3.setText("Nhập mật khẩu mới");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel4.setText("Nhập lại mật khẩu mới");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel5.setText("Mã xác nhận");

        btnDoiMK.setBackground(new java.awt.Color(255, 255, 102));
        btnDoiMK.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnDoiMK.setText("Xác nhận");
        btnDoiMK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoiMKActionPerformed(evt);
            }
        });

        btnGuiMa.setText("Gởi Mã Đến Email");
        btnGuiMa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuiMaActionPerformed(evt);
            }
        });

        showPasswordCheckBox.setText("Hiển thị mật khẩu ?");
        showPasswordCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordCheckBoxActionPerformed(evt);
            }
        });

        txtThoiGian.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtThoiGian.setForeground(new java.awt.Color(255, 0, 51));
        txtThoiGian.setText("Mã xác nhận có hiệu lực trong 30s");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(5, 5, 5)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDoiMK, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnGuiMa)
                                .addGap(36, 36, 36)
                                .addComponent(showPasswordCheckBox))
                            .addComponent(txtThoiGian)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMKmoi, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                            .addComponent(txtNhapLaiMK)
                            .addComponent(txtMaXN)
                            .addComponent(txtEmail))))
                .addContainerGap(134, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMKmoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNhapLaiMK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaXN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuiMa)
                    .addComponent(showPasswordCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(txtThoiGian)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDoiMK, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 102));
        jLabel7.setText("Đổi mật khẩu đọc giả");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(97, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
            .addGroup(layout.createSequentialGroup()
                .addGap(299, 299, 299)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGap(35, 35, 35)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(138, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDoiMKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoiMKActionPerformed
        // TODO add your handling code here:
        if (validateForm()) {

            try {

                int result = JOptionPane.showConfirmDialog(this,
                        "Bạn có chắc muốn đổi mật khẩu",
                        "Xác nhận",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    //                    label.setText("Bạn chọn: Yes");
                    if (updateMKbyEmail(txtEmail.getText()) > 0) {
                        JOptionPane.showMessageDialog(this, "Sua Thanh Cong!");
                        remainingSeconds = -1;

                    }
                } else if (result == JOptionPane.NO_OPTION) {
                    JOptionPane.showMessageDialog(this, "Bạn chọn không!");

                } else {
                    JOptionPane.showMessageDialog(this, "không chọn!");

                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }//GEN-LAST:event_btnDoiMKActionPerformed

    private void showPasswordCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPasswordCheckBoxActionPerformed
        // TODO add your handling code here:
        if (showPasswordCheckBox.isSelected()) {
            // Hiển thị mật khẩu
            txtMKmoi.setEchoChar((char) 0);
            txtNhapLaiMK.setEchoChar((char) 0);
        } else {
            // Ẩn mật khẩu
            txtMKmoi.setEchoChar('\u25cf');
            txtNhapLaiMK.setEchoChar('\u25cf');
        }
    }//GEN-LAST:event_showPasswordCheckBoxActionPerformed

    private void btnGuiMaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuiMaActionPerformed
        // TODO add your handling code here:

        if (validateXN()) {
            if (numberThread != null && isRunning == true) {
                numberThread.interrupt();
                isRunning = false;
            }
            if (!isRunning) {
                startNumberThread();
                startCountDown();
                GuiMail();
            }
        }
    }//GEN-LAST:event_btnGuiMaActionPerformed
// dao

    public int updateMKbyEmail(String Email) {
        try {
            String sql = "update TaiKhoan set password = ? from TaiKhoan tk inner join NguoiDung nd on tk.MaTK = nd.MaTK where nd.Email = ?";
            conn = layKetNoi();
            sttm = conn.prepareStatement(sql);
            sttm.setString(1, txtMKmoi.getText());
            sttm.setString(2, txtEmail.getText());

            if (sttm.executeUpdate() > 0) {
                System.out.println("Cập nhật thành công !");
                return 1;
            }
        } catch (Exception e) {
            System.out.println("Lỗi!" + e.toString());
        }
        return -1;
    }

 
// maxn

    private void startNumberThread() {
        numberThread = new Thread(() -> {
            Random random = new Random();
            while (!Thread.interrupted()) {
                randomNumber = random.nextInt(900000) + 100000;
                System.out.println("Số ngẫu nhiên: " + randomNumber);

                try {
                    Thread.sleep(30000); // Sleep for 1 minute
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    return;
                }
            }
        });
        numberThread.start();
        isRunning = true;
    }

    public void GuiMail() {
        try {
            Properties p = new Properties();
            p.put("mail.smtp.auth", "true");
            p.put("mail.smtp.starttls.enable", "true");
            p.put("mail.smtp.host", "smtp.gmail.com");
            p.put("mail.smtp.port", 587);

            String accountName = "dhuyclone2001@gmail.com";
            String accountPassword = "xolqvydetnilxcxy";
            Session s = Session.getInstance(p,
                    new javax.mail.Authenticator() {
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(accountName, accountPassword);
                }
            });
            String from = "dhuyclone2001@gmail.com";
            String to = txtEmail.getText();
//            if (gmail == null) {
//                to = getEmailbyMATK(maTk);
//            } else {
//                to = gmail;
//            }
            String subject = "Mã xác nhận";
            String body = "Mã xác nhận của bạn là: " + String.valueOf(randomNumber);
            Message msg = new MimeMessage(s);
            msg.setFrom(new InternetAddress(from));
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));
            msg.setSubject(subject);
            msg.setText(body);
            Transport.send(msg);
            JOptionPane.showMessageDialog(null, "Mail was sent successfully", "Message",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Vui long nhap lai mail!");
            e.printStackTrace();
        }
    }

    public void startCountDown() {
        btnGuiMa.setEnabled(false);
        remainingSeconds = 30; // 2 minutes in seconds
        timer = new Timer(1000, (ActionEvent e) -> {
            if (remainingSeconds > 0) {
                int minutes = remainingSeconds / 60;
                int seconds = remainingSeconds % 60;
                txtThoiGian.setText("Time remaining: " + String.format("%02d:%02d", minutes, seconds));
                remainingSeconds--;
            } else if (remainingSeconds == -1) {
                txtThoiGian.setText("Mã xác nhận có hiệu lực trong 30s");
                timer.stop();
                btnGuiMa.setEnabled(true);
            } else {
                txtThoiGian.setText("Mã xác nhận hết hiệu lục vui lòng ấn gửi lại");
                timer.stop();
                btnGuiMa.setEnabled(true);
            }
        });
        timer.start();
    }
//   validate

//    public boolean checkMKCu() {
//        if (gmail == null) {
//            char[] mkCu = txtEmail.getPassword();
//            String passCu = new String(mkCu);
//            if (!passCu.equals(getMKCubyMATK(maTk))) {
//                JOptionPane.showMessageDialog(this, "Mật khẩu cũ không đúng!");
//                return false;
//            }
//        }
//        if (maTk == null) {
//            char[] mkCu = txtEmail.getPassword();
//            String passCu = new String(mkCu);
//            if (!passCu.equals(getMKCubyMail(gmail))) {
//                JOptionPane.showMessageDialog(this, "Mật khẩu cũ không đúng!");
//                return false;
//            }
//        }
//
//        return true;
//    }
    public boolean validateForm() {
//        char[] mkCu = txtEmail.getPassword();
//        String passCu = new String(mkCu);

        char[] mkMoi = txtMKmoi.getPassword();
        String passMoi = new String(mkMoi);

        char[] nhaplaiMK = txtNhapLaiMK.getPassword();
        String passNhapLai = new String(nhaplaiMK);
        if (txtEmail.getText().isBlank() && passMoi.isBlank() && passNhapLai.isBlank()) {
            JOptionPane.showMessageDialog(this, "Chưa nhập thông tin !");
            return false;
        }

         if (txtEmail.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Chưa nhập mail !");
            txtEmail.requestFocus();
            return false;
        }
        if (passMoi.trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Chưa nhập password mới !");
            txtMKmoi.requestFocus();
            return false;
        }
        if (passNhapLai.trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Chưa nhập lại password mới !");
            txtNhapLaiMK.requestFocus();
            return false;
        }

        if (!passMoi.equals(passNhapLai)) {
            JOptionPane.showMessageDialog(this, "Mật khẩu nhập lại chưa đúng !");
            txtNhapLaiMK.requestFocus();
            return false;
        }

        if (!txtMaXN.getText().trim().equals(String.valueOf(randomNumber))) {
            JOptionPane.showMessageDialog(this, "Mã xác nhận sai !");
            txtMaXN.requestFocus();
            return false;
        }
        if (ndDao.findbyEmail(txtEmail.getText()) == null) {
            JOptionPane.showMessageDialog(this, "Mail này không tồn tại!");
            return false;
        }
        return true;
    }

    public boolean validateXN() {
        

        char[] mkMoi = txtMKmoi.getPassword();
        String passMoi = new String(mkMoi);

        char[] nhaplaiMK = txtNhapLaiMK.getPassword();
        String passNhapLai = new String(nhaplaiMK);
        if (txtEmail.getText().isBlank() && passMoi.isBlank() && passNhapLai.isBlank()) {
            JOptionPane.showMessageDialog(this, "Chưa nhập thông tin !");
            return false;
        }

        if (txtEmail.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Chưa nhập mail !");
            txtEmail.requestFocus();
            return false;
        }
        if (passMoi.trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Chưa nhập password mới !");
            txtMKmoi.requestFocus();
            return false;
        }
        if (passNhapLai.trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Chưa nhập lại password mới !");
            txtNhapLaiMK.requestFocus();
            return false;
        }

        if (!passMoi.equals(passNhapLai)) {
            JOptionPane.showMessageDialog(this, "Mật khẩu nhập lại chưa đúng !");
            txtNhapLaiMK.requestFocus();
            return false;
        }

//        if (!txtMaXN.getText().trim().equals(String.valueOf(randomNumber))) {
//            JOptionPane.showMessageDialog(this, "Mã xác nhận sai !");
//            txtMaXN.requestFocus();
//            return false;
//        }
        if (ndDao.findbyEmail(txtEmail.getText()) == null) {
            JOptionPane.showMessageDialog(this, "Mail này không tồn tại!");
            return false;
        }
        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDoiMK;
    private javax.swing.JButton btnGuiMa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox showPasswordCheckBox;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JPasswordField txtMKmoi;
    private javax.swing.JTextField txtMaXN;
    private javax.swing.JPasswordField txtNhapLaiMK;
    private javax.swing.JLabel txtThoiGian;
    // End of variables declaration//GEN-END:variables

}
