/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mylibsys.libsystem.ui.UIND;

import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.mylibsys.libsystem.ui.LibSystem;
import com.mylibsys.libsystem.ui.UIND.LoginUIND;
import static com.mylibsys.libsystem.utils.getAppVerSion.getAppVersion;
import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.CompletableFuture;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author kuteb
 */
public class chaoUIND extends javax.swing.JFrame {

    public static String ip1 = null;

    public chaoUIND() {
        initComponents();
        versionLbl.setText("Version: " + getAppVersion());
        t1.start();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        prgbar = new javax.swing.JProgressBar();
        versionLbl = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LibSys");
        setResizable(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chao.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel2.setText(" ");

        prgbar.setBackground(new java.awt.Color(204, 204, 204));
        prgbar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        prgbar.setForeground(new java.awt.Color(0, 153, 153));
        prgbar.setBorderPainted(false);
        prgbar.setStringPainted(true);

        versionLbl.setText("Version: ");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Thư Viện Trường THPT Trần Hưng Đạo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 824, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(19, 19, 19)
                .addComponent(versionLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(prgbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(versionLbl)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(17, 17, 17)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prgbar, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("FlatLaf Light".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chaoUIND().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JProgressBar prgbar;
    private javax.swing.JLabel versionLbl;
    // End of variables declaration//GEN-END:variables

    Thread t1 = new Thread() {
        @Override
        public void run() {
            for (int i = 0; i <= 99; i++) {
                prgbar.setValue(i);
                prgbar.setString("Loading " + i + " %");
                try {
                    Thread.sleep(15);
                } catch (InterruptedException ex) {
                }

            }
            prgbar.setString("đang thực hiện lấy kết nối với  máy chủ " + prgbar.getValue() + " %");
            if (layip()!= null) {
                prgbar.setValue(100);
                try {
                    prgbar.setString("loading " + prgbar.getValue() + " %");
                    t1.sleep(1000);
                    chaoUIND.this.dispose(); // Đóng form hiện tại
                    LoginUIND newForm = new LoginUIND(); // Tạo form mới
                    newForm.setVisible(true); // Hiển thị form mới
                } catch (InterruptedException ex) {
                    Logger.getLogger(chaoUIND.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                prgbar.setString("đang thực hiện lấy kết nối lại máy chủ!" + prgbar.getValue());
                layip();
            }

        }
    };

//    public String layIP() {
////        String ip;
//        try ( MulticastSocket multicastSocket = new MulticastSocket(12345)) {
//            InetAddress multicastGroup = InetAddress.getByName("224.0.0.1");
//            multicastSocket.joinGroup(multicastGroup);
//
//            byte[] buffer = new byte[256];
//            DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
//
//            multicastSocket.receive(packet);
//
//            String serverIP = new String(packet.getData(), 0, packet.getLength());
////            ip.setText(serverIP);
//            System.out.println("Server IP received from multicast: " + serverIP);
//            if (serverIP != null) {
//                ip1 = serverIP;
//                return serverIP;
//            }
//            multicastSocket.leaveGroup(multicastGroup);
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//        return null;
//    }
      public String layip() {
        String serviceAccountPath = "cl.json";
        try ( InputStream serviceAccount = getClass().getClassLoader().getResourceAsStream(serviceAccountPath)) {
            // Initialize Firebase Admin SDK with the service account key
            FirebaseOptions options = new FirebaseOptions.Builder()
                    .setServiceAccount(serviceAccount)
                    .setDatabaseUrl("https://fir-realtime-chat-swing-default-rtdb.asia-southeast1.firebasedatabase.app/")
                    .build();
            FirebaseApp.initializeApp(options);

            DatabaseReference usersRef = FirebaseDatabase.getInstance().getReference("users");

            String username = "ad";

            CompletableFuture<String> ipAddressFuture = new CompletableFuture<>();

            usersRef.child(username).child("ipAddress").addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(DataSnapshot dataSnapshot) {
                    String ipAddress = dataSnapshot.getValue(String.class);

                    ipAddressFuture.complete(ipAddress);
                }

                @Override
                public void onCancelled(DatabaseError databaseError) {
                    System.err.println("Error: " + databaseError.getMessage());

                    ipAddressFuture.complete(null);
                }
            });

            String ipAddress = ipAddressFuture.join();

            if (ipAddress != null) {
                ip1 = ipAddress;
                System.out.println("IP Address for " + username + ": " + ipAddress);
                System.out.println("IP nhan dc tu realtime data base la:" + ip1);

//                diachi.setText(ipAddress);
                // Dừng chương trình sau khi nhận được địa chỉ IP
                return ipAddress;
            } else {
//                diachi.setText("wait");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

}
